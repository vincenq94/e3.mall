<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- 配置扫描 -->
	<context:component-scan base-package="cn.itheima.order.controller" />

	<!-- Spring 3.0.x中使用了mvc:annotation-driven后，默认会帮我们注册默认处理请求，参数和返回值的类，其中最主要的两个类：DefaultAnnotationHandlerMapping 和 AnnotationMethodHandlerAdapter ，分别为HandlerMapping的实现类和HandlerAdapter的实现类，从3.1.x版本开始对应实现类改为了RequestMappingHandlerMapping和RequestMappingHandlerAdapter。

		HandlerMapping的实现类的作用
		实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。

		HandlerAdapter的实现类的作用
		实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。

		当配置了mvc:annotation-driven/后，Spring就知道了我们启用注解驱动。然后Spring通过context:component-scan/标签的配置，会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求。
	-->

	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="cn.itheima.order.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>


<!--	<context:component-scan base-package="cn.itheima.manager." />-->

	<!--国际化-->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>


	<!-- 公共配置，默认配置在org.springframework.web.servlet.Dispatcher类同包DispatcherServlet.properties下 -->
	<!-- HandlerMapping，映射器，配置的bean.name对应请求的url，将请求的url映射为一个HandlerExecutionChain对象（包含一个Handler和多个HandlerInterceptor) -->
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>
	<!-- HandlerAdapter，将handler包装为适配器，满足各种不同适配器的使用，Controller、SimpleFormController等 -->
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>apolication/json; charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
				<value>application/json</value>
				<value>application/javascript</value>
				<value>text/json</value>
				<value>text/javascript</value>
			</list>
		</property>
		<property name="objectMapper">
			<bean class="cn.itheima.commons.json.Jackson2ObjectMapper" />
		</property>
	</bean>

	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="webBindingInitializer">
			<bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
				<property name="validator" ref="validator" />
				<property name="conversionService">
					<bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean"></bean>
				</property>
			</bean>
		</property>
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
				<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<bean class="org.springframework.http.converter.ResourceHttpMessageConverter" />
				<bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
				<bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" />
				<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<mvc:annotation-driven validator="validator" />

    <!--配置资源映射-->
	<mvc:resources location="/css/" mapping="/css/**"/>
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/images/" mapping="/images/**"/>

	<!-- 配置多媒体解析器	-->
	<!-- 定义文件上传解析器-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设定默认编码 -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- 设定文件上传的最大值5MB，5*1024*1024 -->
		<property name="maxUploadSize" value="5242880"></property>
	</bean>

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:conf/resource.properties" />

	<!-- Bean Validator -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>


	<bean id="handlerExceptionResolver" class="cn.itheima.commons.exception.AnnotationHandlerMethodExceptionResolver">
		<property name="messageConverters" ref="mappingJacksonHttpMessageConverter" />
	</bean>

	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>


	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>


	<!-- 使用dubbo发布服务 -->
	<!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="e3-order-web" />
<!--	<dubbo:registry protocol="zookeeper" address="192.168.46.130:2181" />-->
		<dubbo:registry protocol="zookeeper" address="192.168.25.128:2181" />
	<!-- 声明需要暴露的服务接口 -->
	<dubbo:reference interface="cn.itheima.order.interfaces.OrderService" id="orderService" />
	<dubbo:reference interface="cn.itheima.cart.interfaces.CartService" id="cartService" />
	<dubbo:reference interface="cn.itheima.sso.interfaces.TokenService" id="tokenService" />
</beans>